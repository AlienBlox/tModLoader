name: Build tModLoader

env:
    DevBranch: gh_actions_test
    StableBranch: stable
    PreviewBranch: preview

# Controls when the action will run. 
on:
  # This workflow runs when a push to major branch happens, or when a label is added to a pull request targetting major branch.
  push:
    # note these cannot use the env.Branch variables
    branches: [gh_actions_test, stable, preview, 1.4.4]
  pull_request_target:
    types: [labeled]
    branches: [preview, stable, 1.4.4]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a primary job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    # Make sure not to run this job on other labels
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'Safe to Test')

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Debug
        shell: bash
        run: |
          echo "Dev Branch is: ${{env.DevBranch}}"
          echo "Preview Branch is: ${{env.PreviewBranch}}"
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out base branch
        uses: actions/checkout@v2
        with:
          ref: ${{github.ref}}
          persist-credentials: false
          fetch-depth: 0
      
      # Re-calculate the versioning of tModLoader
      - name: Update Versioning
        id: version
        if: github.event_name == 'push' && (contains(github.ref, env.DevBranch))
        shell: bash
        run: |
          echo "Attempting get previous version id"
          version=$(git describe --tags --abbrev=0)
          
          echo "Previous Version is: $version"
          regex="^v([0-9]+).([0-9]+).([0-9]+).([0-9]+)?$"
          if [[ $version =~ $regex ]] ; then
            year="${BASH_REMATCH[1]}"
            month="${BASH_REMATCH[2]}"
            feature="${BASH_REMATCH[3]}"
            patch="${BASH_REMATCH[4]}"
            oldate="$year.$month"
          else
            echo "Previous version '$version' is not a valid version"
            exit 1
          fi
          
          echo "Checking Version Updates"
          if [[ "refs/heads/${{env.DevBranch}}" = $branch ]] ; then
            echo "Checking Version Updates for ${{env.DevBranch}}"
             newdt="$(date --date="1 month" +%Y.%m)"
             if [[ ! "$oldate" = "$newdt" ]] ; then
                echo "Rolling Forward the Month... from '$oldate' to '$newdt'"
                oldate="$newdt"
                feature=1
                patch=0
             fi
          fi
          else if [[ "refs/heads/${{env.StableBranch}}" = $branch && $feature = 2 || "refs/heads/${{env.PreviewBranch}}" = $branch && $feature = 1 ]] ; then
             echo "Checking Version Updates for Rollover"
             ((++feature)
             patch=0
          fi
          else
            echo "Rolling Forward the Patch #..."
            ((++patch))
          fi 
          
          version="$oldate.$feature.$patch"
          echo "New version is '$version'"
          echo "::set-output name=new_version::$version"
        env:
          branch: ${{github.ref}}
        
     